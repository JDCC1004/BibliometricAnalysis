@INPROCEEDINGS{8363469,
  author={Sabitzer, Barbara and Demarle-Meusel, Heike and Jarnig, Maria},
  booktitle={2018 IEEE Global Engineering Education Conference (EDUCON)}, 
  title={Computational thinking through modeling in language lessons}, 
  year={2018},
  volume={},
  number={},
  pages={1913-1919},
  abstract={In contrast to the field of computer-supported or computer-assisted language learning (CALL), which has been investigated intensively for the last decades since the beginning of e-learning and technology-enhanced learning, computational thinking and computer science concepts are not quite common in the context of language lessons. Computational thinking is a problem solving process that, at first sight, has not much to do with language learning. However, as demanded by Jeannette Wing in 2006, it should be taught to everyone like reading, writing and mathematics. By introducing computational thinking in language lessons e.g. through modeling we could "kill two birds with one stone": On the one hand, we can teach computational thinking and basics of computer science at all school levels even if there is no related subject, e.g. in primary schools. On the other hand, computational thinking tools like modeling can support language learning in different ways and help to train text comprehension, to acquire and elaborate vocabulary or to visualize grammar rules etc. This paper describes some creative possibilities of introducing computational thinking through modeling in language lessons in primary and secondary education. Besides best practices, it further presents some experiences and results gained from teacher observation, interviews and informal feedback from students and teachers.},
  keywords={Computational modeling;Unified modeling language;Education;Object oriented modeling;Conferences;Problem-solving;computational thinking;modeling;education;language learning},
  doi={10.1109/EDUCON.2018.8363469},
  ISSN={2165-9567},
  month={April},}
@INPROCEEDINGS{7207372,
  author={Mohan, Aravind and Lu, Shiyong and Zhang, Ke},
  booktitle={2015 IEEE International Conference on Services Computing}, 
  title={Towards an Online Service for Learning Computational Thinking Using Scientific Workflows}, 
  year={2015},
  volume={},
  number={},
  pages={340-347},
  abstract={Computational thinking has recently been widely recognized as a fundamental skill that should be cultivated for everyone and in every field. Although there is an increasing interest in research in teaching and learning computational thinking in recent years, an engaging, effective online learning system is yet to be built for teaching, learning, and applying computational thinking online. To this end, we have developed DATAVIEW, an online social learning system for learning computational thinking concepts and skills online. The main contributions of this paper are: 1) we developed a new, effective online learning model for computational thinking based on our previous widely-applied R2D2 model. A signature characteristic of this new model is being interactive and learner-centered, thus "i" is carried out through the entire learning experiences, which provides teaching facilities to instructors and interactional tools among instructors and learners, 2) we implemented, validated, and refined iR2D2 in our DATAVIEW computational thinking online service, 3) We propose to use the DBR (design-based-research) approach to study the relationship between technology and teaching in the context of computational thinking, generating research results and findings applicable to online teaching in other domains as well.},
  keywords={Education;Computational modeling;Computers;Algebra;Learning systems;Computational efficiency;Visualization;computational thinking;eLearning;scientific workflow management systems;DATAVIEW},
  doi={10.1109/SCC.2015.54},
  ISSN={},
  month={June},}
@INPROCEEDINGS{8845505,
  author={Xu, Ling and Tong, Ming-Wen and Li, Bin and Meng, Jiang and Fan, Chen-Yao},
  booktitle={2019 14th International Conference on Computer Science & Education (ICCSE)}, 
  title={Application of Concept Map in the Study of Computational Thinking Training}, 
  year={2019},
  volume={},
  number={},
  pages={454-459},
  abstract={The call for innovative talents in the information age is imminent. With the promulgation of the domestic high school information technology curriculum standards in 2017, the formulation and positioning requirements of the core literacy of the disciplines, computational thinking as one of the four core literacy, is the thinking ability that everyone should have. Many foreign educational practice studies have shown that mind mapping can effectively promote students' cognitive development and knowledge construction. However, the domestic educational application research is relatively lacking in this aspect, and there is little research on the comprehensive and in-depth combination of it and the core literacy “computational thinking” of the specific information technology discipline. To this end, based on the research status at home and abroad, this paper attempts to use the concept map tool to represent several important functions of computational thinking, "definition of problems", "abstract function", "build model" and "Debugging and improvement". The diagram incorporates the teaching model in the computational thinking development curriculum. This study used quasi-experimental research methods to explore the effect of conceptual map tools on students' computational thinking. The research results show that this teaching method has a significant effect on the development of students' computational thinking.},
  keywords={Education;Tools;Programming;Visualization;Computational modeling;Creativity;Standards;computational thinking;concept map;project-based learning},
  doi={10.1109/ICCSE.2019.8845505},
  ISSN={2473-9464},
  month={Aug},}
@INPROCEEDINGS{10216563,
  author={Ragonis, Noa and Hazzan, Orit},
  booktitle={2022 International Conference on Computational Science and Computational Intelligence (CSCI)}, 
  title={A MOOC on Computational Thinking for All: Pedagogical Principles, Challenges, and Their Application}, 
  year={2022},
  volume={},
  number={},
  pages={1943-1949},
  abstract={For the last two decades, the world of pre-academic and academic education has been occupied with ways of developing computational thinking. Responding to the common perception to develop those thinking skills in all learners, and indeed in the entire population, we developed a MOOC on computational thinking. The course advocates the development of computational thinking skills in every human being, at any age, and in any subject matter, emphasizing the common, essential computational thinking skills: problem decomposition, abstraction, and generalization. Based on our belief in the importance of the application of computational thinking skills when using computerized environments, and the importance of its significant application in developing an understanding of any discipline, the course is based on the development of simulations of computational processes in any area of knowledge. We widely discuss the pedagogical challenges of developing a MOOC on thinking skills without teacher-learner interaction, and share how we overcame these challenges by implementing the Four Pedagogies for Developing Computational Thinking (4P4CT) framework, which integrates the pedagogies of active learning, project-based learning, product-based learning, and context-based learning. We present preliminary findings from research we conducted during the first two MOOC cycles with about 1,600 learners. Specifically, quantitative and qualitative data analysis of students' learning processes are discussed, reflecting the students' multi-faceted and deep engagement in the MOOC.},
  keywords={Computer aided instruction;Electronic learning;Data analysis;Scientific computing;Computational modeling;Sociology;Education;computational thinking;teacher education;4P4CT;active learning;project-based learning;product-based learning;context-based learning;MOOC},
  doi={10.1109/CSCI58124.2022.00350},
  ISSN={2769-5654},
  month={Dec},}
@INPROCEEDINGS{9569311,
  author={Si, Jiarui and Feng, Huan and Niu, Zikun and Bian, Yizhou and Fu, Yu and Guo, Hong and Su, Zhenxing and Deng, Weimin and Li, Xiaoxia},
  booktitle={2021 16th International Conference on Computer Science & Education (ICCSE)}, 
  title={Training Methods of Computational Thinking for Medical Students in Big Data Age}, 
  year={2021},
  volume={},
  number={},
  pages={13-20},
  abstract={The era of big data witnesses that ‘computing’ has become an indispensable tool for medical development in many aspects of medicine domain. The ability of computational thinking is of great significance to medical students engaging in basic research and clinical diagnosis and treatment in the future. However, medical students are lack of this strategy in dealing with problems at present. Meanwhile, there is also a problem of ‘insufficient skills and no training’ in computer learning. In this article, we recommend training students’ computational thinking from three aspects. First, students can learn the basic concepts of computational thinking and different thinking modes of computer scientists through computer courses in both theory and practice in order to train their computational thinking. Second, in the process of thinking, students can directly carry out divergent thinking, logical integration, and practice the thinking methods of scientists such as abstraction and simplification through the mind maps produced by IMindMap software. Third, during the practice of modeling and programming, after using mind maps to make the problem abstract and sort out the content of the creation to draw a flowchart, students start modeling and systematic design through Scratch software. At last, under the help of MATLAB, some specific medical cases enable students to apply computational thinking to practice comprehensively. Our practice in class shows that these training methods has positive influence in improving students computational thinking.},
  keywords={Training;Flowcharts;Systematics;Computational modeling;Big Data;Tools;Software;Medical students;Computational thinking;mind maps;MATLAB},
  doi={10.1109/ICCSE51940.2021.9569311},
  ISSN={2473-9464},
  month={Aug},}
@INPROCEEDINGS{8599435,
  author={Chen, Li and Xia, Jiaoxiong and Tao, Jie},
  booktitle={2018 5th International Conference on Systems and Informatics (ICSAI)}, 
  title={Cultivating Computational Thinking Among Students Of Liberal Art In Basic Computer Courses}, 
  year={2018},
  volume={},
  number={},
  pages={544-548},
  abstract={With the concept of Computational Thinking proposed, how to cultivate students' Computational Thinking in basic computer courses has become the focus of basic computer education reform in recent years. Computational Thinking has gradually been recognized by computer educators and has become an important goal of basic computer education. According to the author's experience, the paper analyzes the reasons why students of literal arts also need to acquire Computational Thinking after summarizing the current research status of Computational Thinking at home and abroad. Regarding the cultivation of Computational Thinking ability as a higher level than knowledge learning and skill training, the paper puts forward some improving suggestions on how to cultivate Computational Thinking among students of liberal arts.},
  keywords={Art;Computer science;Writing;Software;Economics;Training;Computational Thinking;Computer Foundation;Students of Liberal Art;Educational Reform},
  doi={10.1109/ICSAI.2018.8599435},
  ISSN={},
  month={Nov},}
@INPROCEEDINGS{9962465,
  author={Mohammadi-Aragh, Mahnas Jean and Sun, Yan and Dyer, Jamie L. and Harris, Jonathan G. and Robinson, Chase A. and Bai, Mengni and Kavanagh, Jolie K. and Ball, Kimberly E.},
  booktitle={2022 IEEE Frontiers in Education Conference (FIE)}, 
  title={Teaching Computational Thinking and Spatial Visualization in K-12 with 3D Weather Visualizations}, 
  year={2022},
  volume={},
  number={},
  pages={1-6},
  abstract={This Innovative Practice Full Paper presents a K-12 teacher training workshop for computational thinking instruction. Computational thinking refers to a set of skills that are necessary for success in engineering and science careers. Teaching computational thinking skills prior to university-level enrollment helps students be more successful in their degree programs. Our project serves as an attempt to innovate science education by designing and testing data-driven, scientific inquiry experiences that integrate teaching and learning of atmospheric science with computational thinking and practices in authentic, innovative, and effective ways. In this paper, we describe our design process for developing authentic computational thinking and spatial visualization modules for the two-week computational thinking professional development that uses 3D weather visualizations to train K-12 teachers in eleven computational thinking and spatial visualization skills.},
  keywords={Training;Three-dimensional displays;Data analysis;Engineering profession;Conferences;Education;Data visualization;computational thinking;spatial visualization;K-12},
  doi={10.1109/FIE56618.2022.9962465},
  ISSN={2377-634X},
  month={Oct},}
@INPROCEEDINGS{5635189,
  author={Koh, Kyu Han and Basawapatna, Ashok and Bennett, Vicki and Repenning, Alexander},
  booktitle={2010 IEEE Symposium on Visual Languages and Human-Centric Computing}, 
  title={Towards the Automatic Recognition of Computational Thinking for Adaptive Visual Language Learning}, 
  year={2010},
  volume={},
  number={},
  pages={59-66},
  abstract={Visual programming languages can be used to make computer science more accessible to a broad range of students. The evaluative focus of current research in the area of visual languages for educational purposes primarily aims to better understand motivational benefits as compared to traditional programming languages. Often these visual languages claim to teach students computational thinking concepts; however, although the evaluations show that students may exhibit more enthusiasm, it is not always clear what computational thinking concepts students have actually learned. In this paper we attempt to develop a visual semantic evaluation tool for student-created games and simulations that goes towards depicting the computational thinking concepts implemented by the students. Through semantically analyzing a given student's created projects over time, this visual evaluation tool, called the Computational Thinking Pattern (CTP) graph, can possibly indicate the existence of computational thinking transfer from games to science simulations.},
  keywords={Games;Visualization;Semantics;Programming;Syntactics;Computer languages;Computational modeling;Computational Thinking;Visual Language Programming;Knowledge Transfer},
  doi={10.1109/VLHCC.2010.17},
  ISSN={1943-6106},
  month={Sep.},}
@ARTICLE{10345555,
  author={González-Pizarro, Felipe and López, Claudia and Vásquez, Andrea and Castro, Carlos},
  journal={IEEE Transactions on Education}, 
  title={Inequalities in Computational Thinking Among Incoming Students in an STEM Chilean University}, 
  year={2024},
  volume={67},
  number={2},
  pages={180-189},
  abstract={While computational thinking arises as an essential skill worldwide, formal primary and secondary education in Latin America rarely incorporates mechanisms to develop it in their curricula. The extent to which students in the region acquire computational thinking skills remains largely unknown. To start addressing this void, this article presents findings from a cross sectional study that characterizes the computational thinking abilities of incoming students at a Chilean university with a strong emphasis on STEM disciplines. Based on more than 500 responses, this study provides evidence of significant inequalities in computational thinking across gender, type of school (private or no), and prior programming knowledge. The discussion offers insights into how these disparities relate to contextual factors of the country, such as a highly socio-economically segregated educational system, public policies focused mainly on technology access, and heavy reliance on voluntary initiatives, to develop computational thinking. The findings can enlighten upcoming research endeavors and formulate strategies to create a more equitable field for students entering STEM degrees in nations facing similar circumstances.},
  keywords={Programming profession;Training;Education;Conferences;Public policy;Engineering students;Codes;Computational thinking;engineering education;gender;Latin America;public/private schools},
  doi={10.1109/TE.2023.3334193},
  ISSN={1557-9638},
  month={April},}
@INPROCEEDINGS{9272507,
  author={Garcia, Patricia and Jackson, Ashley and Jacobs, Laura-Ann},
  booktitle={2020 Research on Equity and Sustained Participation in Engineering, Computing, and Technology (RESPECT)}, 
  title={Centering the Identities of Girls of Color in Computational Thinking Programs}, 
  year={2020},
  volume={1},
  number={},
  pages={1-7},
  abstract={Efforts to broaden participation in computing have revealed the need for a deeper theoretical and empirical understanding of how girls of color form computing identities. In this paper, we use the concept of identities-in-practice as an analytical frame to examine how girls of color engage in computational thinking practices. Our research investigates how the identities of girls of color can be leveraged as funds of knowledge in learning spaces and asks the following research question: How does centering the identities of girls of color impact their engagement with computational thinking practices? We provide a program overview of CompuGirls, describe our curricular design approach, and share results from pilot implementations of the program offered at public libraries in Michigan, Arizona, and California. Results from our pilot year demonstrate that integrating identity exploration into a computational thinking curriculum results in a mutually reinforcing relationship where girls of color experience reflective identity development while simultaneously increasing their understanding of computational thinking. We present our approach as a promising avenue for connecting computing knowledge and skills to girls' identities and lived experiences. By focusing on the girls' identities, the program re-imagines computational experiences by fostering interactions with computational thinking from a personal perspective. Ultimately, we argue that centering girls' identities should be viewed as an integral part of the learning process and not tangential.},
  keywords={Libraries;Color;Cultural differences;Education;Programming profession;Image color analysis;Focusing;computing education;computational thinking;gender},
  doi={10.1109/RESPECT49803.2020.9272507},
  ISSN={},
  month={March},}
@INPROCEEDINGS{8308511,
  author={Xiao, Min and Yu, Xiaohua},
  booktitle={2017 International Conference of Educational Innovation through Technology (EITT)}, 
  title={A Model of Cultivating Computational Thinking Based on Visual Programming}, 
  year={2017},
  volume={},
  number={},
  pages={75-80},
  abstract={The traditional information technology course focuses on the learning of programming tools and ignores the development of students' Computational Thinking. The emergence of visual programming tools provides a new opportunity for the training of Computational Thinking. On the basis of studying the limitations of thinking training in the traditional information technology class and the advantages of visual programming in computational thinking, this paper proposes a computational thinking training model based on visual programming. The model based on project adopt the combination of teaching plan and learning plan to design teaching and cultivate Computational Thinking. Applying this model to the actual teaching process by designing a teaching case based on the visual programming tool App Inventor, the experimental results show that the Computational Thinking of students in this model is improved in formalization and modeling. Through proposing this model and verifying its validity, we can provide the feasibility and research ideas for further studies by using visual programming to cultivate students' Computational Thinking.},
  keywords={Visualization;Computational modeling;Tools;Training;Programming profession;Computer Thinking;Visual Programming;Projectbased Learning},
  doi={10.1109/EITT.2017.26},
  ISSN={},
  month={Dec},}
@INPROCEEDINGS{6016643,
  author={Chang, Chih-Kai},
  booktitle={The 7th International Conference on Digital Content, Multimedia Technology and its Applications}, 
  title={Integrate social simulation content with game designing curriculum to foster computational thinking}, 
  year={2011},
  volume={},
  number={},
  pages={115-118},
  abstract={Computational thinking is a fundamental analytical ability to solve problems, design systems, and understand human behavior based on the fundamental concepts of computer science. The concept of computational thinking is almost needed on every profession in the computerization of society. Teaching computational thinking to cultivate problem solving ability by computer is a challenge of computer science education, especially for the K-12 level. Although studies introduce computational concepts by programming design, computational thinking and computer science are not computer programming. The study uses social simulation content (i.e. NetLogo, which uses muti-agent technology) to scaffold learning computational thinking concepts, such as simple genetic algorithm, parallel computing, artificial neural net, or deadlock (such as dining philosophers). To stimulate learning transfer onto computational thinking, NetLogo models library will be used to motivate reflection and meta-cognition development. Preliminary experimental results came from both questionnaires and artifacts. In the future, Gero's (1990) function-behaviour-structure (FBS) ontology will be used for the qualitative analysis to explain the outcomes of learning transfer.},
  keywords={Computational modeling;Object oriented modeling;Brain modeling;Programming profession;Biological system modeling;Computer languages},
  doi={},
  ISSN={},
  month={Aug},}
@INPROCEEDINGS{7757678,
  author={de Araujo, Ana Liz Souto O. and Andrade, Wilkerson L. and Serey Guerrero, Dalton D.},
  booktitle={2016 IEEE Frontiers in Education Conference (FIE)}, 
  title={A systematic mapping study on assessing computational thinking abilities}, 
  year={2016},
  volume={},
  number={},
  pages={1-9},
  abstract={Several initiatives have been created to promote Computational Thinking (CT) abilities in students. There are multiple approaches of assessing CT and wide abilities and skills involved. However, the evidence on how to assess CT has not yet been systematically grouped or reviewed. The goal of our study is to identify and classify approaches to promote CT and the different ways of assessing CT abilities. To achieve this goal, a systematic mapping study was planned and executed. The results reveal that: (i) programming courses are the most common pedagogical approaches to promote CT for K-12 students; (ii) multiple skills are involved in CT, but solving problems, algorithms, and abstraction are most common abilities assessed; and (iii) codes and multi-choice questionnaires are the most common artifacts for assessing CT abilities. This study points out to the fact that there are open questions for exploring and developing new researches for promoting and assessing CT abilities.},
  keywords={Systematics;Education;Programming profession;Context;Libraries;Vehicles},
  doi={10.1109/FIE.2016.7757678},
  ISSN={},
  month={Oct},}
@INPROCEEDINGS{7880506,
  author={Robles, Gregorio and Moreno-León, Jesús and Aivaloglou, Efthimia and Hermans, Felienne},
  booktitle={2017 IEEE 11th International Workshop on Software Clones (IWSC)}, 
  title={Software clones in scratch projects: on the presence of copy-and-paste in computational thinking learning}, 
  year={2017},
  volume={},
  number={},
  pages={1-7},
  abstract={Computer programming is being introduced in schools worldwide as part of a movement that promotes Computational Thinking (CT) skills among young learners. In general, learners use visual, block-based programming languages to acquire these skills, with Scratch being one of the most popular ones. Similar to professional developers, learners also copy and paste their code, resulting in duplication. In this paper we present the findings of correlating the assessment of the CT skills of learners with the presence of software clones in over 230,000 projects obtained from the Scratch platform. Specifically, we investigate i) if software cloning is an extended practice in Scratch projects, ii) if the presence of code cloning is independent of the programming mastery of learners, iii) if code cloning can be found more frequently in Scratch projects that require specific skills (as parallelism or logical thinking), and iv) if learners who have the skills to avoid software cloning really do so. The results show that i) software cloning can be commonly found in Scratch projects, that ii) it becomes more frequent as learners work on projects that require advanced skills, that iii) no CT dimension is to be found more related to the absence of software clones than others, and iv) that learners -even if they potentially know how to avoid cloning- still copy and paste frequently. The insights from this paper could be used by educators and learners to determine when it is pedagogically more effective to address software cloning, by educational programming platform developers to adapt their systems, and by learning assessment tools to provide better evaluations.},
  keywords={Cloning;Software;Sprites (computer);Programming profession;Parallel processing;Visualization},
  doi={10.1109/IWSC.2017.7880506},
  ISSN={},
  month={Feb},}
@ARTICLE{8502019,
  author={Munoz, Roberto and Villarroel, Rodolfo and Barcelos, Thiago S. and Riquelme, FabiáN and Quezada, ÁNgeles and Bustos-Valenzuela, Patricia},
  journal={IEEE Access}, 
  title={Developing Computational Thinking Skills in Adolescents With Autism Spectrum Disorder Through Digital Game Programming}, 
  year={2018},
  volume={6},
  number={},
  pages={63880-63889},
  abstract={In the last years, many didactic activities have been proposed to develop Computational Thinking (CT) skills in children and adolescents. Among these activities, the digital game programming stands out as a promising alternative considering that it is related to a familiar and motivating context for students. These initiatives are not specifically aimed at individuals with special needs such as the autism spectrum disorder (ASD). Children and adolescents with ASD usually have some limitations related to communication, cognitive flexibility, and interpersonal relationships. However, it seems natural that the skills potentially developed through game programming activities are especially beneficial for the public with ASD. In this paper, we describe the offering and evaluation of a Game Building Workshop adapted to adolescents with this condition. The guidelines used to define the workshop activities are described. An assessment based on the classroom observation and analysis of produced artifacts indicate that the participants acquired CT skills related to programming at a high level. In addition, the collaborative nature of the activities offered a stimulating and welcoming environment for individuals with ASD.},
  keywords={Games;Autism;Conferences;Guidelines;Programming profession;Visualization;Game design workshop;autism spectrum disorder;neurodiversity},
  doi={10.1109/ACCESS.2018.2877417},
  ISSN={2169-3536},
  month={},}
@INPROCEEDINGS{9637185,
  author={Souza, Isabelle M. L. and Andrade, Wilkerson L. and Sampaio, Lívia M. R.},
  booktitle={2021 IEEE Frontiers in Education Conference (FIE)}, 
  title={Educational Robotics Applied to Computational Thinking Development: A Systematic Mapping Study}, 
  year={2021},
  volume={},
  number={},
  pages={1-8},
  abstract={Educational Robotics (ER) is a tool that can favor teamwork, stimulate creativity, and the ability to solve students' problems through the process of assembling and programming robots. In this sense, ER has been used to improve educational practices. There are several initiatives that seek to stimulate Computational Thinking (CT) to stand out. Although ER being used to develop CT, there are still no guidelines based on scientific studies that support this use. The objective of this Research Full Paper is to identify: a) the main pedagogical approaches are applied in classes with ER focused on developing students' CT; b) the central difficulties are encountered in classes with ER focused on developing students' CT; c) the CT skills are presents in classes with ER focused on developing students' CT; d) the instruments are used to assess students' CT during classes with ER; e) the students' profile who participated in classes with ER focused o on developing students' CT; f) the educational robotics technologies are adopted in classes focused on developing students' CT. To achieve these goals, we planned and carried out systematic mapping of the literature. The results show that, through ER, CT is approached through the teaching of programming languages in a collaborative way in Early Childhood and High School. The most CT skills observed are related to programming, such as sequencing, algorithm, loop, generalization, decomposition, and debugging. The main instruments for assessing students are tests, and the most significant difficulty is the limitation of class hours. Finally, LEGO® is the most used technology in class.},
  keywords={Systematics;Instruments;Education;Debugging;Robot sensing systems;Teamwork;Object recognition},
  doi={10.1109/FIE49875.2021.9637185},
  ISSN={2377-634X},
  month={Oct},}
@INPROCEEDINGS{10398358,
  author={Ouaazki, Abdessalam and Bergram, Kristoffer and Holzer, Adrian},
  booktitle={2023 IEEE International Conference on Teaching, Assessment and Learning for Engineering (TALE)}, 
  title={Leveraging ChatGPT to Enhance Computational Thinking Learning Experiences}, 
  year={2023},
  volume={},
  number={},
  pages={1-7},
  abstract={Given the pervasive reliance on technology in modern society, teaching Computational Thinking (CT) abilities is becoming increasingly relevant. These abilities, such as modeling and coding, have become crucial for a larger audience of students, not only those who wish to become software engineers or computer scientists. Recent advances in Large Language Models (LLMs), such as ChatGPT, provide powerful assistance to complete computational tasks, by simplifying code generation and debugging, and potentially enhancing interactive learning. However, it is not clear if these advances make CT tasks more accessible and inclusive for all students, or if they further contribute to a digital skills divide, favoring the top students. To address this gap, we have created and evaluated a novel learning scenario for transversal CT skills that leveraged LLMs as assistants. We conducted an exploratory field study during the spring semester of 2022, to assess the effectiveness and user experience of LLM-augmented learning. Our results indicate that the usage of ChatGPT as a learning assistant improves learning outcomes. Furthermore, contrary to our predictions, the usage of ChatGPT by students does not depend on prior CT capabilities and as such does not seem to exacerbate prior inequalities.},
  keywords={Computational modeling;Education;Chatbots;User experience;Software;Task analysis;Springs;Large Language Models;Interactive Learning Environments;Collaborative Learning;Human-Computer Interaction},
  doi={10.1109/TALE56641.2023.10398358},
  ISSN={},
  month={Nov},}
@INPROCEEDINGS{6685067,
  author={Miller, L. Dee and Soh, Leen-Kiat and Chiriacescu, Vlad and Ingraham, Elizabeth and Shell, Duane F. and Ramsay, Stephen and Hazley, Melissa Patterson},
  booktitle={2013 IEEE Frontiers in Education Conference (FIE)}, 
  title={Improving learning of computational thinking using creative thinking exercises in CS-1 computer science courses}, 
  year={2013},
  volume={},
  number={},
  pages={1426-1432},
  abstract={Promoting computational thinking is one of the top priorities in CS education as well as in other STEM and non-STEM disciplines. Our innovative NSF-funded IC2Think project blends computational thinking with creative thinking so that students leverage their creative thinking skills to “unlock” their understanding of computational thinking. In Fall 2012, we deployed creative exercises designed to engage Epstein's creative competencies (Surrounding, Capturing, Challenging and Broadening) in introductory level CS courses targeting four different groups (CS, engineering, combined CS/physical sciences, and humanities majors). Students combined hands-on problem solving with guided analysis and reflection to connect their creative activities to CS topics such as conditionals and arrays and to real-world CS applications. Evaluation results (approximately 150 students) found that creative thinking exercise completion had a linear “dosage” effect. As students completed more exercises [0/1 – 4], they increased their long-term retention [a computational thinking test], F(3, 98) = 4.76, p =.004, partial Eta2 = .127 and course grades, F(3, 109) = 4.32, p =.006, partial Eta2 = .106. These findings support our belief that the addition of creative thinking exercises to CSCE courses improves the learning of computational knowledge and skills.},
  keywords={Ciphers;Reflection;Writing;Computer science;Data collection;Debugging;Educational institutions;CS1;Creative Thinking;Computational Thinking;College;Computer Science},
  doi={10.1109/FIE.2013.6685067},
  ISSN={2377-634X},
  month={Oct},}
@ARTICLE{9063433,
  author={Cachero, Cristina and Barra, Pilar and Meliá, Santiago and López, Otoniel},
  journal={IEEE Access}, 
  title={Impact of Programming Exposure on the Development of Computational Thinking Capabilities: An Empirical Study}, 
  year={2020},
  volume={8},
  number={},
  pages={72316-72325},
  abstract={Today's digital society has turned the development of students' computational thinking capabilities into a critical factor for their future success. As higher education institutions, we need to take responsibility for this development in every degree course we offer, and provide students with the kind of subjects and activities that best contribute to this aim. In this paper, we study the impact of following an introductory programming course on the development of the computational thinking capabilities of university students. In order to achieve this aim, a concurrent cohort observational study was carried out in which we measured both the subjective and objective computational thinking capabilities of 104 participants (50 first year students enrolled on a Bachelor's degree course in Psychology at the Catholic University of Murcia (UCAM), and 54 first year students enrolled on a Bachelor's degree course in Health Information Systems at the University of Alicante (UA)). The statistical procedures applied to test our hypotheses were a two-way mixed ANOVA, a paired-sample T-test and an independent-sample T-test. The data shows that the group at UA had an initial higher subjective perception of their computational capabilities than the group at UCAM. This perception was supported by their objective scores, which were also significantly higher. However, the subjective assessment of computational capability of the UA group diminished after exposure to the programming course, contrasting with the fact that their objective computational capabilities improved significantly. In the UCAM group, both subjective and objective capabilities remained constant over time. Based on these results, we can conclude that computational thinking capabilities are not developed naturally, but need to be trained. Providing such training to all our students, and not only to those enrolled on undergraduate degrees in engineering, is of paramount importance to allow them to face the challenges of their future professions. This paper empirically demonstrates the extent to which exposing subjects to a programming course may contribute to this aim.},
  keywords={Programming profession;Training;Instruments;Psychology;Information systems;Problem-solving;Programming;computational thinking;problem-solving;career development;technology social factors;observational study},
  doi={10.1109/ACCESS.2020.2987254},
  ISSN={2169-3536},
  month={},}
@INPROCEEDINGS{6826132,
  author={Gross, Sebastian and Kim, Mischa and Schlosser, Joachim and Mohtadi, Coorous and Lluch, Dan and Schneider, Dorian},
  booktitle={2014 IEEE Global Engineering Education Conference (EDUCON)}, 
  title={Fostering computational thinking in engineering education: Challenges, examples, and best practices}, 
  year={2014},
  volume={},
  number={},
  pages={450-459},
  abstract={Computational Thinking is a core capability for most engineers. The term summarizes a set of skills needed to transform real-life challenges into problems that can be solved with the help of a computer and to apply computer-based solutions to questions at hand. This mindset is fundamental to almost every engineering task. However, teaching Computational Thinking is a great challenge for educators worldwide. In designing and implementing university curricula, one has to take an increasing number of arguments into consideration. Technological progress requires the design, creation, and analysis of increasingly large and complex systems. Engineering working environments and tasks demand interdisciplinary teams and close communication between involved groups. In designing engineering curricula, these factors need to be considered and the necessary skills must be implicitly or explicitly developed. This paper highlights three examples of classes and projects aimed at enabling students to develop and increase Computational Thinking through systematic introduction of computational tools. From these successful case studies, the paper derives six best practices for fostering Computational Thinking in engineering education. A review of several examples is given, that are used to highlight and extract best practices. This provides a comprehensive overview of the relationships and simplifies the application of the aforementioned principles to course and curriculum designs.},
  keywords={Engineering education;Computers;Educational institutions;MATLAB;Robot sensing systems;Hardware;curriculum development;computational thinking;engineering skill set;education concepts specific for engineering education;industry and engineering education;integrated curriculum;education tools;project based learning},
  doi={10.1109/EDUCON.2014.6826132},
  ISSN={2165-9567},
  month={April},}
@INPROCEEDINGS{7344063,
  author={Nesiba, Natasha and Pontelli, Enrico and Staley, Timothy},
  booktitle={2015 IEEE Frontiers in Education Conference (FIE)}, 
  title={DISSECT: Exploring the relationship between computational thinking and English literature in K-12 curricula}, 
  year={2015},
  volume={},
  number={},
  pages={1-8},
  abstract={DISSECT (DIScover SciEnce through Computational Thinking) is a project aimed at introducing students to computer science principles by establishing computational thinking (CT) as a problem-solving technique within middle school and high school Science, Technology, Engineering, and Mathematics (STEM) courses. While DISSECT has shown successful integration of CT into middle school and high school STEM curricula, illustrating the pervasive nature of CT, a question remained; “can CT also be infused into humanities courses (e.g., English, Art, History) in addition to scientific courses (e.g., Chemistry, Biology, Computer Science)?” The answer is positive. The objective of this paper is to present one approach to bridge the gap between CT and humanities through the curriculum of a 12th-grade English Literature course. The course blends CT practices with composition and literature to provide students with the ability to write critical and comparative analyses of selected literature. This paper will describe multiple modules that integrate computational thinking into the course, and discuss the results and assessment tools used to measure student competency in computational thinking.},
  keywords={Algorithm design and analysis;Fellows;Computer science;Education;Google;Computers;Problem-solving;Computer science;Computer science education;Computational thinking;English literature;K-12},
  doi={10.1109/FIE.2015.7344063},
  ISSN={},
  month={Oct},}
@INPROCEEDINGS{9225910,
  author={Abdullah, Abdul Halim and Othman, Muhammad Asnawi and Ismail, Norulhuda and Rahman, Sharifah Nurarfah S. Abd and Mokhtar, Mahani and Zaid, Norasykin Mohd},
  booktitle={2019 IEEE International Conference on Engineering, Technology and Education (TALE)}, 
  title={Development of Mobile Application for The Concept of Pattern Recognition in Computational Thinking for Mathematics Subject}, 
  year={2019},
  volume={},
  number={},
  pages={1-9},
  abstract={Computational thinking is one of the aspects emphasised in the Malaysian education system. However, the learning aids in the form of mobile applications that support computational thinking for mathematics are very limited in Malaysia. With that notion, this study aims to develop a mobile app for conceptual recognition pattern which is one of the skills in computational thinking for secondary school mathematics. The ADDIE model comprises of five phases which are analysis, design, development, implementation and evaluation are used as references for the development purpose. The earliest three phases of the ADDIE model focus on the aspect of application development. While the last two phases involve the aspects of appraisal from the applications which has been developed and it involved 23 mathematics teachers. Questionnaires with Likert Scale were used in the study as instruments to measure the five main aspects of the applications which are facilitation, usefulness, design, knowledge and suitability. The data was analysed using descriptive statistics based on frequency and percentage. The results of the analysis showed that the majority of respondents gave positive feedback on the five aspects measured in using the application. In conclusion, the mobile app of the pattern recognition concept for computational thinking skills for this mathematics subject has been agreed by the respondents to have good characteristics and brings great potential for the use by teachers and students in mathematics' classes.},
  keywords={Mobile applications;Pattern recognition;Education;Computational modeling;Social sciences;Mathematical model;computational thinking;pattern recognition;mobile application;facilitation;usefulness;design;knowledge;suitability},
  doi={10.1109/TALE48000.2019.9225910},
  ISSN={2470-6698},
  month={Dec},}
@ARTICLE{10278231,
  author={Mandanici, Marcella and Spagnol, Simone},
  journal={IEEE Transactions on Education}, 
  title={Integrating Computational Thinking With the Curriculum of Future Professional Musicians}, 
  year={2024},
  volume={67},
  number={6},
  pages={836-845},
  abstract={The purpose of this study is to look at how a music programming course affects the development of computational thinking in undergraduate music conservatory students. In addition to teaching the fundamentals of computational thinking, music programming, and logic, the course addresses the Four C’s of education. The change in students’ attitudes toward computer and algorithmic skills, creativity, communication, and collaboration is measured using a pre- and post-test experimental design. Additionally, computational thinking abilities are assessed through the administration of music analysis, procedural, graphical, and logic quizzes, while creativity is evaluated through a qualitative grading of the students’ final music projects. Results show a general perceived improvement of the students’ attitudes toward the Four C’s as well as a good ability to convert learned computational models into musical creativity. However, more effort is needed in order to guarantee an overall improvement in the students’ actual computational thinking abilities.},
  keywords={Education;Programming profession;Music;Creativity;Production;Collaboration;Visualization;Computational thinking;digital transformation;professional musical education;the Four C’s},
  doi={10.1109/TE.2023.3313394},
  ISSN={1557-9638},
  month={Dec},}
@INPROCEEDINGS{9778055,
  author={Chen, Bing-Hong and Huang, Tsui-Feng and Chou, Sheng-Chieh},
  booktitle={2021 International Conference on Technologies and Applications of Artificial Intelligence (TAAI)}, 
  title={Research on Teaching Effectiveness of Computational Thinking Based on Service Learning}, 
  year={2021},
  volume={},
  number={},
  pages={155-161},
  abstract={Computational thinking has been widely regarded as an important ability to adapt to the future. College students use the knowledge they have learned to help elementary students in the community learn computational thinking, thereby enhancing the motivation and achievement of the course. Use Scratch software tools to support the learning of computational thinking. In addition to cultivating students’ basic knowledge and abilities, it also assists the lack of learning resources in community elementary schools through practical actions of service learning, so that students can focus their learning on task-base purposes. Comprehensive research and analysis are conducted based on the evaluation of the students' completed works, the learning satisfaction scale, and the data of the key indicators of self-evaluation of computational thinking, plus the questionnaire survey of the primary school students receiving assistance. The results show that: it helps to stimulate students' desire to learn, thereby significantly improving academic performance and learning motivation. At the same time, it makes students have self-confidence and a sense of accomplishment, and makes learners aware of the inadequacy of self-learning, and promotes their willingness to learn from passive to active.},
  keywords={Education;Learning (artificial intelligence);Task analysis;Software tools;computational thinking;learning motivation;task-based instruction;Scratch},
  doi={10.1109/TAAI54685.2021.00037},
  ISSN={2376-6824},
  month={Nov},}
@INPROCEEDINGS{7344415,
  author={Li, Ying and Liu, Yu and Shu, Pan},
  booktitle={2015 IEEE Frontiers in Education Conference (FIE)}, 
  title={Teaching research and practice of blended leaning model based on computational thinking}, 
  year={2015},
  volume={},
  number={},
  pages={1-8},
  abstract={With the wide use of computers, how to make students understand the special way of thinking of computer science and find the appropriate methods to solve problems in their own fields like computer scientists are the challenges for educators. This paper proposed a computational thinking model based on blended learning Mctbbl and a descending dimension method for problem-space transformation. The Mctbbl model analyzes and researches the application of computational thinking in computer science by the organic combination of computational thinking and blended learning in a life-cycle perspective. On one hand, the model can summarize the core concepts and important principles in computer science and extract the typical thoughts and general methods of solving problems; on the other hand, the model can implement the teaching and learning of computational thinking by means of blended learning. Based on the model, the teachers can teach the problem-solving process by using computer more intuitively and clearly and the students can understand the application of computer knowledge more easily and simply. The Mctbbl prolongs the study life cycle which takes preview as beginning, teacher-student discussion as body and practical application as core to ensure integrity, endurance and consistency of teaching.},
  keywords={Decision support systems;Education;Handheld computers;Computational modeling;Automation;Scientific computing;Arrays;Computational Thinking;Blended learning;Descending dimension;Abstract;Automation},
  doi={10.1109/FIE.2015.7344415},
  ISSN={},
  month={Oct},}
@ARTICLE{10508087,
  author={Liao, Jian and Zhong, Linrong and Zhe, Longting and Xu, Handan and Liu, Ming and Xie, Tao},
  journal={IEEE Transactions on Learning Technologies}, 
  title={Scaffolding Computational Thinking With ChatGPT}, 
  year={2024},
  volume={17},
  number={},
  pages={1628-1642},
  abstract={ChatGPT has received considerable attention in education, particularly in programming education because of its capabilities in automated code generation and program repairing and scoring. However, few empirical studies have investigated the use of ChatGPT to customize a learning system for scaffolding students’ computational thinking. Therefore, this article proposes an intelligent programming scaffolding system using ChatGPT following the theoretical framework of computational thinking and scaffolding. A mixed-method study was conducted to investigate the affordance of the scaffolding system using ChatGPT, and the findings show that most students had positive attitudes about the proposed system, and it was effective in improving their computational thinking generally but not their problem-solving skills. Therefore, more scaffolding strategies are discussed with the aim of improving student computational thinking, especially regarding problem-solving skills. The findings of this study are expected to guide future designs of generative artificial intelligence tools embedded in intelligent learning systems to foster students’ computational thinking and programming learning.},
  keywords={Chatbots;Education;Programming profession;Codes;Task analysis;Problem-solving;Encoding;Artificial-intelligence-generated content (AIGC);ChatGPT;computational thinking (CT);scaffolding},
  doi={10.1109/TLT.2024.3392896},
  ISSN={1939-1382},
  month={},}
@INPROCEEDINGS{10578918,
  author={Palomés, Xavier Pi I and Verdaguer-Codina, Joan and Casas, Pau Fonseca I and Rubiés-Viera, José Luis},
  booktitle={2024 IEEE Global Engineering Education Conference (EDUCON)}, 
  title={Physical and Digital Twin with Computational Thinking to Foster STEM Vocations in Primary Education}, 
  year={2024},
  volume={},
  number={},
  pages={1-8},
  abstract={This work aims to explore the application of the physical and digital twin pair as a computational thinking instrument to support learning and exercise proportional reasoning at the ages at which pursuing STEM studies is decided. Diverse studies reveal that the initial decision about the vocation in studies is made towards the end of the primary education stage, also from 8–9 years old. The Digital Transformation Commission of the Engineering Associations of Catalonia is concerned about the low number of young people who decide to pursue STEM studies. STEM explorations in early childhood lay the foundation for lifelong learning. In addition, from age 5, children informally begin to practice proportional reasoning, and in the third year of primary school (8–9 years old), the subject is formally introduced into the Primary Education curriculum. The notion of proportionality is very transversal, and it is one of the fundamental concepts of the STEM field. The consequences of an incomplete understanding of it directly or indirectly affect the attitude of subjects toward mathematics and the STEM world. With the emergence of Industry 4.0, the digital twin concept is becoming one of the central instruments of Digital Transformation. In this paper, we propose using computational thinking to help the understanding of proportional thinking using a physical and digital twin pair. In 2022, computational thinking was introduced into the Spanish and Catalan educational system's early childhood, primary, and secondary education curricula. It includes programming with block languages such as Scratch or Snap!. A digital twin of the system has also been implemented in Snap!. Through the collaboration of a primary school, a workshop has been prepared in which they exercise the concepts of proportional reasoning, such as ratio, proportion, scale, or percentage. The approach followed has consisted of developing a physical system of a floating ball, controlling the electric motor's power with an electronic system based on low-cost elements from the maker world. We have designed a very easy-to-use system for any teacher, and its open-source nature ensures its transparency and documentation. The foam ball rises and remains floating at a height determined by the power supplied to the motor. The control of the system is carried out with Snap!. It will be assumed that the engine revolutions are proportional to the power setpoint. The physical system generates a high level of expectation and attention in the students, facilitating the process of its abstraction. The range of options of the developed system allows experimenting with the actual system and a schematic digital twin with sound effects. In all cases, the same computational thinking tools have been used to exercise the concepts and powerful ideas of proportional reasoning. At the end of the workshop, the understanding of the concepts exercised and the assessment of their personal experience were evaluated. This gave us helpful information to motivate students of these ages and below to maintain their STEM vocation.},
  keywords={Computers;Instruments;Conferences;Toy manufacturing industry;Documentation;Cognition;Digital twins;Microworlds;Digital Twin;STEM;Computational Thinking;Proportional Reasoning},
  doi={10.1109/EDUCON60312.2024.10578918},
  ISSN={2165-9567},
  month={May},}
@INPROCEEDINGS{10455810,
  author={Jumana, Athaillah Adhar and Umboh, Josua Golden and I Ketut Dharma Wijaya, K and Gunawan, Alexander Agung Santoso and Saputra, Karen Etania},
  booktitle={2023 6th International Conference on Information and Communications Technology (ICOIACT)}, 
  title={The Impact of Playing Multiplayer Online Battle Arena Video Games on the Enhancement of Computational Thinking Skills Among Students in Indonesia}, 
  year={2023},
  volume={},
  number={},
  pages={108-113},
  abstract={This research examines the impact of playing Multiplayer Online Battle Arena (MOBA) video games on computational thinking skills among Indonesian college students. Using a quantitative approach, structured and valid questionnaires were administered to collect data and explore the potential benefits of video games in education. The findings indicate that playing MOBA games is associated with enhanced computational thinking skills. Additionally, Participants recognized the positive influence of playing MOBA games on computational thinking, highlighting improved strategic thinking, decision-making, and team coordination as main benefits. These results contribute to the existing research on gaming and cognitive skills, underscoring the potential of MOBA games for fostering computational thinking abilities. Educators and program developers can utilize these insights to enhance teaching and learning methods by integrating video games.},
  keywords={Training;Learning systems;Video games;Data analysis;Decision making;Games;Particle measurements;Multiplayer Online Battle Arena;Computational Thinking;Students;Indonesia;Education and training},
  doi={10.1109/ICOIACT59844.2023.10455810},
  ISSN={2770-4661},
  month={Nov},}
@INPROCEEDINGS{10107843,
  author={Qu, ZhiWei and Liu, JiaMing and Che, Lu and Su, YanXiu and Zhang, Wei},
  booktitle={2023 IEEE 12th International Conference on Educational and Information Technology (ICEIT)}, 
  title={Research on the Application of Gamification Programming Teaching for High School Students’ Computational Thinking Development}, 
  year={2023},
  volume={},
  number={},
  pages={144-149},
  abstract={Computational thinking, as one of the core literacies of the Chinese IT courses, is an important area of IT education in primary and secondary schools. This research aims to improve the level of computational thinking of high school students by using Minecraft as a tool for Python gamified programming teaching design and analyzing the effectiveness of 60 high school students’ improvement in algorithmic thinking, problem solving, creativity, critical thinking, and collaboration after the teaching practice. The research results show that gamified programming teaching can significantly improve high school students’ computational thinking, providing a new teaching approach and ideas for high school IT education and computational thinking development.},
  keywords={Education;Urban areas;Collaboration;Data models;Problem-solving;Information technology;Task analysis;game-based learning;gamification programming;computational thinking;high school information technology},
  doi={10.1109/ICEIT57125.2023.10107843},
  ISSN={},
  month={March},}
@INPROCEEDINGS{9962501,
  author={Mendoza Diaz, Noemi V. and Trytten, Deborah A. and Meier, Russ},
  booktitle={2022 IEEE Frontiers in Education Conference (FIE)}, 
  title={Introductory Engineering Courses With Computational Thinking: The Impact of Educational Privilege and Engineering Major Entry Policy on Student Pathways}, 
  year={2022},
  volume={},
  number={},
  pages={1-9},
  abstract={This research category paper examines the impact of computational thinking within first-year engineering courses on student pathways into engineering. Computational thinking and programming appear in many introductory engineering courses. Prior work found that early computational thinking development is critical to the formation of engineers. This qualitative research paper extends the research by documenting how pre-university privileges impact first-year student trajectories into engineering through a qualitative examination of student interviews from three institutions with different processes for matriculation into engineering majors. We identify the underlying assumptions of meritocracy that are concealing the role of educational privilege in selecting which engineering students will be allowed to join the field. We provide a suggestion for how institutions can include computational thinking in introductory engineering courses with less risk of furthering the marginalization of students with few academic privileges.},
  keywords={Trajectory;Interviews;Engineering students;Programming profession;diversity;computational thinking;first year curriculum;persistence;matriculation},
  doi={10.1109/FIE56618.2022.9962501},
  ISSN={2377-634X},
  month={Oct},}
@ARTICLE{9222821,
  author={Pinto, Juan D. and Quintana, Chris and Quintana, Rebecca M.},
  journal={Computing in Science & Engineering}, 
  title={Exemplifying Computational Thinking Scenarios in the Age of COVID-19: Examining the Pandemic's Effects in a Project-Based MOOC}, 
  year={2020},
  volume={22},
  number={6},
  pages={97-102},
  abstract={The rapid, global spread of COVID-19 has led to an unprecedented rise in enrollments in online learning experiences among learners of all ages. In this article, we explore the impact of the global pandemic on a massive open online course, Problem Solving Using Computational Thinking, with a particular focus on the topics learners chose for their final projects. The Computational Thinking MOOC was designed using a project-based learning approach and aims to provide learners with an introduction to the “big ideas” of computational thinking using a range of case studies that encompass topics such as airport surveillance, epidemiology, and human trafficking. Beyond observing a sharp increase in enrollment and engagement at the time the pandemic began, we discuss ways in which the course's project-based pedagogy allowed learners to bring their present experiences and concerns together with the course's subject matter in order to meet the learning objectives for the course. Many learners chose to address aspects of the pandemic in the course's final project and applied ideas about computational thinking to peer-graded assignments that conveyed an individualized sense of importance and urgency. We assert that this approach, along with the inclusion of a timely epidemiology case study, enabled learners to more deeply internalize the role that computational thinking can play in their own lives and in society as a whole.},
  keywords={Pandemics;Electronic learning;COVID-19;Computer aided instruction;Problem-solving},
  doi={10.1109/MCSE.2020.3024012},
  ISSN={1558-366X},
  month={Nov},}
@INPROCEEDINGS{8985944,
  author={Jacob, Sharin and Nguyen, Ha and Richardson, Debra and Warschauer, Mark},
  booktitle={2019 Research on Equity and Sustained Participation in Engineering, Computing, and Technology (RESPECT)}, 
  title={Developing a Computational Thinking Curriculum for Multilingual Students: An Experience Report}, 
  year={2019},
  volume={},
  number={},
  pages={1-2},
  abstract={This study discusses a NSF-funded Research Practice Partnership (RPP) to develop and pilot instructional materials for teaching computational thinking to Grades 3-5 students, with a focus on language learners. The study takes place in a U.S. school district whose percentages of Latino/a students, language learners, and low-income students are among the highest in the nation. The project is among the first to examine the linguistic and sociocultural factors that facilitate the success of multilingual students in mastering computational thinking. Utilizing principles of Design-Based Implementation Research in alignment with the RPP approach, researchers worked collaboratively with teachers and administrators to identify problems of practice in computer science education specific to the district. A broad survey of national and regional computer science initiatives was conducted to identify effective approaches for teaching computational thinking to diverse learners. As a result of this survey, the RPP identified a pathbreaking curriculum that aligns with the Computer Science Teachers Association K-12 standards to pilot in five classrooms in the first year of the RPP. The curriculum was further revised to align with the Common Core State Standards for English Language Arts and the California English Language Development standards during a week-long summer institute. This paper describes these experiences, highlighting the integration of computational thinking into an English Language Arts curriculum as well as the linguistic scaffolding strategies utilized to better meet the needs of multilingual students. This experience report uncovers pedagogical practices of computational thinking for diverse students and identifies areas for future work.},
  keywords={},
  doi={10.1109/RESPECT46404.2019.8985944},
  ISSN={},
  month={Feb},}
@INPROCEEDINGS{9497195,
  author={Saleh, Heba},
  booktitle={2017 27th International Conference on Computer Theory and Applications (ICCTA)}, 
  title={Computational Thinking Skills for Today and Tomorrow’s Talent}, 
  year={2017},
  volume={},
  number={},
  pages={1-1},
  abstract={Summary form only given, as follows. The complete presentation was not made available for publication as part of the conference proceedings. Computational thinking (CT) is a term invented by “J.M. Wing, 2006” to describe a set of thinking skills, behaviors, and approaches that are integral to solving complex challenges using a computer and widely applicable in the information society. CT is a must for today’s and tomorrow’s talent. The added-value of this early exposure to CT is that it will help juniors to shape a solid basis of algorithmic and data structures, which form the basic nuts and bolts of the mechanics of computer programming. The added value of developing professionals has its clear impact on the economy perspective, in light of the forecasted demand for today and tomorrow. (World economic forum, 2017) Computer programming is an outstanding way to develop computational thinking skills. It has been taken programming as a useful way for juniors to learn problem solving and computational thinking with an affirmative and quantifiable effect on juniors’ achievement, not only in areas such as math and science, but also in language skills, creativity, interpersonal skills and social emotional interaction.},
  keywords={Programming profession;Buildings;Information and communication technology;Shape;Qualifications;Problem-solving;Government},
  doi={10.1109/ICCTA43079.2017.9497195},
  ISSN={},
  month={Oct},}
@ARTICLE{8130248,
  author={Aho, Alfred V.},
  journal={The Computer Journal}, 
  title={Computation and Computational Thinking}, 
  year={2012},
  volume={55},
  number={7},
  pages={832-835},
  abstract={We recommend using the term Computation in conjunction with a well-defined model of computation whose semantics is clear and which matches the problem being investigated. Computer science already has a number of useful clearly defined models of computation whose behaviors and capabilities are well understood. We should use such models as part of any definition of the term computation. However, for new domains of investigation where there are no appropriate models it may be necessary to invent new formalisms to represent the systems under study.},
  keywords={},
  doi={10.1093/comjnl/bxs074},
  ISSN={1460-2067},
  month={July},}
@ARTICLE{9020189,
  author={Lin, Pei-Hsuan and Chen, Shih-Yeh},
  journal={IEEE Access}, 
  title={Design and Evaluation of a Deep Learning Recommendation Based Augmented Reality System for Teaching Programming and Computational Thinking}, 
  year={2020},
  volume={8},
  number={},
  pages={45689-45699},
  abstract={Programming is considered a skill to arouse and inspire learner's potential. Learning to program is a complex process that requires students to write grammar and instructions. The structure of a programming language does not cause impose problems to students, the real obstacle is how to apply these learned grammars and present them in a complete and correct program code for problem solving. In this study, a deep learning recommendation system was developed, which includes augmented reality (AR) technology, and learning theory, and is provided for study by students in non-major and also from different learning backgrounds. Those students divided into two groups, the students participating in the experimental group were using the AR system with deep learning recommendation and the students participating in the control group were using the AR system without deep learning recommendation. The results show that students in experimental group perform better than the control group with regards to learning achievement. On the other hand, in the part of computational thinking ability, students using a deep learning recommendation based AR system is significantly better than those using non-deep learning recommendation based AR system. Among the various dimensions of computational thinking, creativity, logical computing, critical thinking, and problem-solving skills are significantly different among the two groups of students. The students in experimental group perform better than the control group with regards to the dimensions of computational thinking, creativity, logical computing, critical thinking, and problem-solving skills.},
  keywords={Machine learning;Education;Programming profession;Problem-solving;Grammar;Augmented reality;Deep learning recommendation;computational thinking;AR technology},
  doi={10.1109/ACCESS.2020.2977679},
  ISSN={2169-3536},
  month={},}
@INPROCEEDINGS{8615232,
  author={Wong, Gary K.W. and Jiang, Shan},
  booktitle={2018 IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE)}, 
  title={Computational Thinking Education for Children: Algorithmic Thinking and Debugging}, 
  year={2018},
  volume={},
  number={},
  pages={328-334},
  abstract={The benefits of developing children's computational thinking have been widely discussed with various approaches and learning tools. This paper reports the piloting of second-year longitudinal study, aiming to examine the effect of computational thinking education on the 5th grade students (n = 85) as they develop their algorithmic thinking and debugging skills. The results show that students benefited from our designed curriculum with learning gains in algorithmic thinking, especially in analyzing and finding the essential instructions to solve computational problems. Students also achieved significant gains in debugging programs. The study demonstrated that with age-appropriate learning materials and learning approach, even young children can develop computational thinking skills important to thriving in 21st century. This pilot study sets the direction of analyzing the rest of the 5th grade students' performance as well as the next year study.},
  keywords={Education;Games;Debugging;Programming profession;Problem-solving;computational thinking;algorithmic thinking;debug;primary school;coding education},
  doi={10.1109/TALE.2018.8615232},
  ISSN={2470-6698},
  month={Dec},}
@ARTICLE{8093668,
  author={Eguíluz, Andoni and Guenaga, Mariluz and Garaizar, Pablo and Olivares-Rodríguez, Cristian},
  journal={IEEE Transactions on Emerging Topics in Computing}, 
  title={Exploring the Progression of Early Programmers in a Set of Computational Thinking Challenges via Clickstream Analysis}, 
  year={2020},
  volume={8},
  number={1},
  pages={256-261},
  abstract={In recent years, many initiatives have aimed to develop basic computational thinking skills. Despite the popularity of online platforms for early programmers, we still lack detailed information to analyze how these skills are acquired. In the present study we analyzed clickstream data from 3,355 participants enrolled in several Computational Thinking workshops using Kodetu, an online platform with fine grained logging features. Participants used Kodetu's coding blocks to solve challenges of increasing difficulty while we gathered their clickstream in the platform. Here, we present our findings after evaluating these data in regards of participants' characteristics (age, sex, previous knowledge), similarity with previously submitted solutions, and degree of discrepancy from the optimal solution. To facilitate collaboration with other researchers in this area, we released our dataset under an open license. To the best of our knowledge, this is the largest Computational Thinking-related datasets publicly available.},
  keywords={Conferences;Tools;Programming profession;Encoding;Hidden Markov models;Aging;Computational thinking;computer science education;educational data mining;educational games;learning technologies;visual programming},
  doi={10.1109/TETC.2017.2768550},
  ISSN={2168-6750},
  month={Jan},}
@INPROCEEDINGS{8363456,
  author={Burbaitė, Renata and Drąsutė, Vida and Štuikys, Vytautas},
  booktitle={2018 IEEE Global Engineering Education Conference (EDUCON)}, 
  title={Integration of computational thinking skills in STEM-driven computer science education}, 
  year={2018},
  volume={},
  number={},
  pages={1824-1832},
  abstract={In the context of Computer Science (CS) education, one of the most important goals is the development of computational thinking (CT) and problem solving skills. Computational thinking skills are closely related to the CS concepts and approaches. These skills cover fundamental programming concepts such as task decomposition, abstractions and generalization, data structures and algorithms. On the other hand, CS education challenges, promote the search for new educational tools, methods, activities and resources. Consequently, CS education should be extended by adding the STEM (Science, Technology, Engineering and Mathematics) paradigm principles. The aim of this paper is to show how STEM-driven CS education supports and ensures the development of computational thinking at the high school. We present the already published STEM-driven CS education approach aiming at extending it by introducing a model to assess student achievements, according to the revised Bloom's taxonomy in the connection with CT skills. As a practical implementation, we describe a curriculum of Programming Basics at the high school with respect to STEM-driven aspects and CT skills. We introduce two case studies implemented in the real educational environment. They provide the evidence of availability of our approach.},
  keywords={Engineering education;Conferences;Three-dimensional displays;Computational Thinking;STEM;STEM-Driven education;Computer Science education;STEM-driven CS education;Revised Bloom's Taxonomy},
  doi={10.1109/EDUCON.2018.8363456},
  ISSN={2165-9567},
  month={April},}
@INPROCEEDINGS{8340502,
  author={Pedersen, Bjarke Kristian Maigaard Kjær and Andersen, Kamilla Egedal and J⊘rgensen, Anders and Köslich, Simon and Sherzai, Fardin and Nielsen, Jacob},
  booktitle={2018 IEEE Integrated STEM Education Conference (ISEC)}, 
  title={Towards playful learning and computational thinking — Developing the educational robot BRICKO}, 
  year={2018},
  volume={},
  number={},
  pages={37-44},
  abstract={Educational Robotics has proven a feasible way of supporting and exemplifying Computational Thinking. With this paper, we describe the user-centered iterative and incremental development of a new educational robotic system, BRICKO, to support tangible, social and playful interaction while educating children in 1st-3rd grade in Computational Thinking. We develop the system through seven main iterations including a total of 108 participant pupils and their teachers. The methodology is a mixture of observation and interviews using Wizard of OZ testing with the early pilot prototypes as well as usability and user experience testing with the following incrementally improved digital prototypes. Our results for development and evaluation are presented for each iteration leading onto the next and describes the evolution of both the BRICKO driving robot as well as the BRICKO programming-board and its different categories of command-bricks. We discuss the methodologies used for assuring a playful and social educational robotic system and conclude that we achieved a useful prototype for supporting education in Computational Thinking.},
  keywords={Robots;Usability;Observatories;Programming profession;Prototypes;Visualization;Computational thinking;educational robotics;playful learning;tangible learning},
  doi={10.1109/ISECon.2018.8340502},
  ISSN={},
  month={March},}
@INPROCEEDINGS{9611850,
  author={Prompolmaueng, Waraporn and Wetmaha, Apisit and Jamsri, Pornsuree},
  booktitle={2021 13th International Conference on Information Technology and Electrical Engineering (ICITEE)}, 
  title={A Game Development to Promote Computational Thinking}, 
  year={2021},
  volume={},
  number={},
  pages={116-121},
  abstract={This paper focuses on game development using Mixed Reality technology, the Magic Leap One device, by exploring with The Lab and Unreal Engine program that are developed in game interpolating Computational Thinking (CT). The research device focuses on integrating thinking skills into 3D games with real-time user interaction. From mixed reality (MR) the application of technology is evaluated in its use for learning effectiveness. The game aims to promote a computational thinking process based on the terms and conditions within 5 levels as well as the complexity of the game with more obstacles in each level as the character travels from beginning to destination. Commands provide for different contexts. Major goal is using mixed reality technology to advance convergence in computing education and training in computational thinking (CT) to help players strengthen their thinking process and CT through the game. This game can be an alternative learning medium for the educator in primary school (Grade 4–6). The assessment of target users 10–15 persons before and after the game tests have 3 aspects in technology, CT, and usability of game performance. An expert evaluation was conducted after the test. Assessment of the overall game focuses on building of CT skill within the game relative to project objectives. Evaluation results were 77.8% by users and 88.6% by the expert. Furthermore, some useful suggestions from assessment suggest adding workshop guidelines for educators or trainers. Thus, this project contributes to the computing education community by using available cutting-edge technology as an optional teaching tool in CT that suits learners in education at the primary level and looks toward future development for higher education.},
  keywords={Training;Three-dimensional displays;Mixed reality;Games;Virtual reality;Tools;Media;Computational Thinking;Mixed Reality Technology;Game Development;Game-based Learning},
  doi={10.1109/ICITEE53064.2021.9611850},
  ISSN={},
  month={Oct},}
@INPROCEEDINGS{9028499,
  author={Costa, Erick J. F. and Campelo, Cláudio E. C. and Campos, Lívia M. R. Sampaio},
  booktitle={2019 IEEE Frontiers in Education Conference (FIE)}, 
  title={Automatic Classification of Computational Thinking Skills in Elementary School Math Questions}, 
  year={2019},
  volume={},
  number={},
  pages={1-9},
  abstract={This research full paper presents the design of an automatic classifier for Computational Thinking skills in math questions, based on Machine Learning and Natural Language Processing techniques. We trained and evaluated our model using a dataset of real-world math questions. We obtained encouraging results that indicate the proposed approach may ease the process of assessing the level of alignment between math questions and Computational Thinking skills, which may help improve the problem-solving ability in students of elementary school. These results stimulate the use of automated environments for the elaboration, classification, and resolution of math questions in conformity with Computational Thinking skills.},
  keywords={Computer science;Predictive models;Natural language processing;Education;Data models;Feature extraction;Problem-solving;computational thinking;math problems;problem-solving ability;machine learning;natural language process},
  doi={10.1109/FIE43999.2019.9028499},
  ISSN={2377-634X},
  month={Oct},}
@ARTICLE{9749967,
  author={Herrero-Álvarez, Rafael and Miranda, Gara and León, Coromoto and Segredo, Eduardo},
  journal={IEEE Transactions on Emerging Topics in Computing}, 
  title={Engaging Primary and Secondary School Students in Computer Science Through Computational Thinking Training}, 
  year={2023},
  volume={11},
  number={1},
  pages={56-69},
  abstract={Although Computer Science has grown to become one of the most highly demanded professional careers, every year, only a small percentage of students choose a degree directly related to Computer Science. Perhaps the problem lies in the lack of information that society has about Computer Science itself, and particularly about the work computer scientists do. No one doubts the role of Mathematics or Languages as core subjects in every primary and secondary education syllabus; however, Computer Science plays a negligible role in most current syllabuses. Only in a few countries have governments paid special attention to content related to Computer Science and to learning to analyze and solve problems the way computer scientists do (Computational Thinking). In this article, we present Piens@ Computacion@ULLmente, a project that provides a methodology to promote Computer Science through Computational Thinking activities among primary and secondary education students. The results obtained from an exhaustive statistical analysis of the data we collected demonstrate that the perception of Computer Science that pre-university students have can be improved through specific training. Moreover, we can also confirm that the performance of pre-university students involving Computational Thinking skills is independent of gender, particularly at the primary education level.},
  keywords={Computer science;Training;Problem-solving;Programming profession;Engineering profession;Licenses;Europe;Computer science;computational thinking;primary education;secondary education;syllabus},
  doi={10.1109/TETC.2022.3163650},
  ISSN={2168-6750},
  month={Jan},}
@INPROCEEDINGS{9073671,
  author={Nuar, Ahmad Najmi Amerhaider and Rozan, Mohd Zaidi Abd},
  booktitle={2019 6th International Conference on Research and Innovation in Information Systems (ICRIIS)}, 
  title={Benefits of Computational Thinking in Entrepreneurship}, 
  year={2019},
  volume={},
  number={},
  pages={1-6},
  abstract={Computational thinking is an essential skill that allows humans to solve a complex problem that later on can be understood by computers and humans. Abstraction and automation are the core of computational thinking. Therefore, CT is the key skill in Industry 4.0. However, in Malaysia's manufacturing, only 50 percent of SMEs deploy automation. Automation can make the company more efficient, more accurate and decrease human error. CT was built based on 4 basic pillars which are abstraction, decomposition, algorithm and pattern recognition. These pillars will encourage automation, efficiency, and innovation. Moreover, one of the benefits of CT for nonprogrammer is the formulated problem can be passed on to information-processing agents such as third-party companies or freelancers who can create the solution. In this paper, we review the benefits of computational thinking in entrepreneurship in the context of Industry 4.0.},
  keywords={Entrepreneurship;Computed tomography;Industries;Automation;Technological innovation;Computers;computational thinking;industry 4.0;automation;entrepreneurship;small and medium enterprise},
  doi={10.1109/ICRIIS48246.2019.9073671},
  ISSN={2324-8157},
  month={Dec},}
@INPROCEEDINGS{9273915,
  author={da Silva, Felippe Fernandes and Beatrys Ruiz Aylon, Linnyer and Flôr, Daniela Eloise},
  booktitle={2020 IEEE Frontiers in Education Conference (FIE)}, 
  title={Teaching Computational Thinking to a Student with Attention Deficit Through Programming}, 
  year={2020},
  volume={},
  number={},
  pages={1-9},
  abstract={This research-to-practice full paper deals with the difficulty that it is possible to teach computational thinking through the teaching of algorithms and programming to a person with ADD. We propose approaches to teach algorithms, knowing that it is a difficult task for many teachers. Likewise, inspiring the student's interest also has its difficulties. The Brazilian Computer Society (SBC) understands that it is fundamental and strategic for Brazil that computer content is taught in basic education. Considering the 4.0 education of a connected generation, the thinking of computer education is relevant to the construction of youth and adult education. When we include people with ADD, this challenge is not trivial. This work presents a case study carried out with a high school student who has ADD and the techniques that were used to teach him to program to maintain his interest in the area. The method used was divided into three stages: Computer Discovery (1); Introduction to computational thinking through programming (2); Learn by Doing, in line with real-world problem solving using pair programming technique and challenge-based learning strategy (3). In order to investigate the effectiveness of the developed strategies, an experimental case study was carried out with a student who has ADD. The student was introduced to the content and approaches for 34 weeks, totaling 204 hours. The student presented a strong indication of learning and will forever have the ability of computational thinking to program and develop their applications.},
  keywords={Education;Programming profession;Software;Tools;Pattern recognition;Parallel processing;Hardware;Computational Thinking;DDA;Active Methodologies;Education 4.0;Teaching Programming},
  doi={10.1109/FIE44824.2020.9273915},
  ISSN={2377-634X},
  month={Oct},}
@INPROCEEDINGS{8753405,
  author={Falkner, Katrina and Vivian, Rebecca and Falkner, Nickolas},
  booktitle={2018 International Conference on Learning and Teaching in Computing and Engineering (LaTICE)}, 
  title={Supporting Computational Thinking Development in K-6}, 
  year={2018},
  volume={},
  number={},
  pages={126-133},
  abstract={This paper describes the CSER Digital Technologies MOOC curriculum, which aims to build confidence and awareness of fundamental computational thinking skills for teachers within the K-6 context. The CSER MOOC builds upon recent advances in the development of the Australian Curriculum Digital Technologies learning area, which explicitly addresses the development of computational thinking skills, moving ICT education away from digital literacy towards embedding the skills needed for the next generation to become creators of technology. The CSER MOOC presents a broad coverage of core computational thinking concepts, with a focus on integrating with existing learning areas and appropriate pedagogy for the K-6 context. In this paper, we discuss our course curriculum, its alignment with key concepts from the formal curriculum statements, example teacher assessments, and discuss key challenges and concerns.},
  keywords={Computational Thinking;K 6;Digital Technologies;Teacher Professional Development;MOOCs},
  doi={10.1109/LaTICE.2018.00031},
  ISSN={2475-1057},
  month={April},}
@INPROCEEDINGS{9962398,
  author={Juárez, Erika Cervantes and Guzmán, Daniel Sánchez},
  booktitle={2022 IEEE Frontiers in Education Conference (FIE)}, 
  title={Developing the computational thinking process in Physics courses, an empirical study for the learning of the rigid body concept in engineering students}, 
  year={2022},
  volume={},
  number={},
  pages={1-6},
  abstract={In the present Research-to-practice Full-paper, the learning, reasoning, and problem-solving processes, in engineering students, have been analyzed from different approaches, one of them is the computational thinking process, where most of the activities must be performed as a computer does and the reasoning is developed with the well-oriented activities realized by them. In many of the engineering career programs, the Physics courses are fundamental, and because of the diversity in contexts, they have not been seen as a subject where students can develop the computational thinking process. Present work describes an empirical study based on the learning of the rigid body concept in physics, with the use of spreadsheets as an electronic tool for promoting the learning with the programming of all the dynamical system, describing the evolution, generating, and analyzing graphics, and explaining the physical phenomena with a high comprehension and transfer of knowledge. At the end, students identified where the concept can be applied in their professional context with the use of a simulation. The learning sequence was implemented in three sessions of 1.5 hours each one, two diagnostic tests were applied, one for identifying the previous knowledge and use of electronic spreadsheets, the second one used as a pretest and post-test, it was focused on the main concepts of the rigid body system, like forces, kinematics, and circular movement. The sequence was implemented with N = 77, students. Session 1, started with the introduction of electronic spreadsheets for their use in science and engineering, some examples in Physics and Mathematics were described with their respect feedbacking for students. For session two, the rigid body concept was described with the support of electronic spreadsheets, all the dynamics, equations, plotting of the results and the relationships of all variables were described; for reinforcing the concept learned, students were asked to solve two more similar exercises with the use of the spreadsheets as homework, and finally they were asked to record, in groups of three students, a video with the solution of the problem assigned. In the video, they must present the problem description, equations and dynamics involved in the solutions and explaining all the programming steps needed to perform the solution in an electronic spreadsheet with its graphical representation and interpretation of the variables, and a description of implications in the changing values of the variables in the mathematical model. At the end of the sequence, in session three, a virtual simulation related to their professional context was used for the reinforcement of all the concepts learned. For analyzing the impact in their learning process, the Normalized Conceptual Gain was used in the pre-test and post-test, results showed a g = 0.85, which represents a high learning and normalized conceptual gain. Finally, the results showed that the computational thinking process can be developed by students, as they must program equations, analyze data, understand it, and identify graphically the variables involved, linking the learning of a physical concept with a computational tool that let them understand in a more clear, specific, and ordered thinking.},
  keywords={Knowledge engineering;Engineering profession;Solids;Mathematical models;Cognition;Software;Engineering students;Computational thinking;engineering students;electronic spreadsheets for learning;physics courses in engineering;professional skills},
  doi={10.1109/FIE56618.2022.9962398},
  ISSN={2377-634X},
  month={Oct},}
@ARTICLE{10506466,
  author={Kaleem, Muhammad and Hassan, Muhammad Awais and Khurshid, Syed Khaldoon},
  journal={IEEE Access}, 
  title={A Machine Learning-Based Adaptive Feedback System to Enhance Programming Skill Using Computational Thinking}, 
  year={2024},
  volume={12},
  number={},
  pages={59431-59440},
  abstract={The solution of a typical programming task involves algorithmic thinking, pattern recognition, decomposition, and abstraction skills. These skills are basic pillars of Computational thinking (CT) and are essential for a computer programmer. Therefore, a programming teacher needs to take these skills into account for the evaluation of students. Existing methods for improving programming competency don’t consider the Computational Thinking of students and perform grading of students without taking these skills into account. Due to this limitation, deficiencies of these skills in students remain unrevealed, posing difficulties for educators to provide need-oriented feedback. The performance of programming students is thus hindered by a lack of interventions. This study proposes a method to evaluate programming students in terms of CT skill components and group them based on their skill set. In this study, 780 students of object-oriented programming (OOP) class were given programming assignments for assessment of programming competencies. These students were then given small programming tasks requiring different computational thinking skill components for their solutions. A machine learning approach was used to perform grouping of these students based on their scores. Six groups of programming students, each having its own set of skill deficiencies, were identified as a result of clustering. One of the groups had an empty set of skill deficiencies and consisted of students proficient in programming. Each of the other five groups had a non-empty set of skill deficiencies and comprised non-proficient programming students. A group-specific skill development plan was built for the groups having skill deficiencies. It was found that such feedback was very effective and improved the CT skill deficiencies of 82% of students.},
  keywords={Programming;Programming profession;Codes;Task analysis;Source coding;Clustering algorithms;Feedback;Cognitive systems;Object oriented programming;Machine learning;Education;Performance evaluation;Computational thinking assessment;feedback;K-means clustering;programming},
  doi={10.1109/ACCESS.2024.3391873},
  ISSN={2169-3536},
  month={},}
@INPROCEEDINGS{8095286,
  author={Altaher, Marah and Ferchichi, Ahmed},
  booktitle={2017 Joint International Conference on Information and Communication Technologies for Education and Training and International Conference on Computing in Arabic (ICCA-TICET)}, 
  title={Computational thinking and Relational Algorithmic Approach}, 
  year={2017},
  volume={},
  number={},
  pages={1-8},
  abstract={This article examine a new method of learning to solve problems using the concepts of computer science named computational thinking, which is a new term emerged in the last decade and was the subject of experts, researchers, associations, scientific bodies and academic institutions. we will study the approach of computational thinking and then we will develop this approach through a descriptive methodology based mainly on the specification and algorithms and achieve the concepts of computational thinking called Relational Algorithmic Approach and highlight the effectiveness of this methodology in education.},
  keywords={Education;Computer science;computational thinking;Relational Algorithmic Approach;learning and teaching;algorithm;specification},
  doi={10.1109/ICCA-TICET.2017.8095286},
  ISSN={},
  month={Aug},}
@ARTICLE{10327734,
  author={Mendoza Diaz, Noemi V. and Yoon, So Yoon and Trytten, Deborah A. and Meier, Russ},
  journal={IEEE Access}, 
  title={Development and Validation of the Engineering Computational Thinking Diagnostic for Undergraduate Students}, 
  year={2023},
  volume={11},
  number={},
  pages={133099-133114},
  abstract={Computational thinking is one barrier to enculturating as a professional engineer. We created the Engineering Computational Thinking Diagnostic (ECTD) as an instructional tool that can identify at-risk first-year engineering students. The purpose of this study is to provide construct validity, internal consistency reliability, item characteristics, and criterion validity evidence for this diagnostic. From fall 2020 to fall 2021, 469 students from three institutions in the United States took the diagnostic. The data from 152 students at one institution was used to provide evidence of predictive validity. Exploratory and confirmatory factor analyses resulted in 20 items loading onto one factor in a good model fit range, with the internal consistency reliability coefficient, Cronbach  $\alpha $  of 0.86. From item analyses based on classical test theory, the diagnostic items on average tended to be slightly easy but had sufficient discrimination power. The correlation matrix for criterion validity evidence indicated that the diagnostic functions well to differentiate students’ computational thinking ability by prior computer science course experience as well as by first-generation status. Predictive validity evidence from regression analyses revealed the statistically significant effect of students’ diagnostic scores assessed at the beginning of the first semester on predicting their end of semester course grades. The ECTD can have a broad impact because it provides a tool to gauge the entry-level skills of students, enabling early curriculum interventions to help retention and persistence to graduation. We make the case that the ECTD could contribute to the development of a more diverse workforce in engineering.},
  keywords={Reliability;Instruments;Engineering students;Computational modeling;Programming profession;Reliability engineering;Analytical models;Computer science education;User experience;Computer science education;computational thinking;diagnostic method;student assessment tools;engineering education;first-year engineering student experience;quantitative research methods;retention;validity;factor analysis},
  doi={10.1109/ACCESS.2023.3335931},
  ISSN={2169-3536},
  month={},}
@INPROCEEDINGS{9320665,
  author={Lin, Zeshan and Ke, Meimei},
  booktitle={2020 Ninth International Conference of Educational Innovation through Technology (EITT)}, 
  title={Instructional Procedure and Strategy of Primary School Programming Education Focusing on Cultivating Computational Thinking}, 
  year={2020},
  volume={},
  number={},
  pages={240-245},
  abstract={Based on the analysis of some famous instructional cases in programming education and in-depth interviews with primary school teachers who are engaged in programming education, this paper focuses on the instructional procedure and strategies of primary school programming education for cultivating students' computational thinking. This examination reveals the current situation and possible problems in the practice of cultivating computational thinking and provide some useful references. Continuous comparison are used to code and analyze the interview data. The article founds that the instructional procedure of cultivating computational thinking in programming education generally involves five major stages: knowledge review, new knowledge exploration, problem analysis, programming on computer, and the stage of reflection. Instructional strategies accordingly include: mind map-supported, unplugged programming, flow chart use, pair programming, log reflection, and more. Finally, the paper concludes with the problems that appeared in teaching, especially in the stage of new knowledge exploration, unplugged programming and pair-programming.},
  keywords={Programming profession;Education;Interviews;Problem-solving;Tools;Task analysis;Focusing;Computational thinking;Programming education;Instructional procedure;Instructional strategy},
  doi={10.1109/EITT50754.2020.00049},
  ISSN={2166-0549},
  month={Dec},}